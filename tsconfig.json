{
  "compilerOptions": {
    "outDir": "./dist/",

    "sourceMap": true,
    "noImplicitAny": true,
    "module": "commonjs",
    "target": "es5",
    "jsx": "react",
    "lib": [

      "dom",
      "es6",
      "dom.iterable",
      "scripthost"
      ]
  },
  "include": [
    "./src/**/*"
  ]
}

// outDir：输出目录。

// sourceMap：把 ts 文件编译成 js 文件的时候，同时生成对应的sourceMap文件。

// noImplicitAny：如果为true的话，TypeScript 编译器无法推断出类型时，它仍然会生成 JavaScript 文件，但是它也会报告一个错误。为了找到错误还是设置为true比较好。

// module：代码规范，也可以选amd。

// target：转换成es5

// jsx：TypeScript具有三种JSX模式：preserve，react和react-native。 这些模式只在代码生成阶段起作用 - 类型检查并不受影响。 在preserve模式下生成代码中会保留JSX以供后续的转换操作使用（比如：Babel）。 另外，输出文件会带有.jsx扩展名。 react模式会生成React.createElement，在使用前不需要再进行转换操作了，输出文件的扩展名为.js。 react-native相当于preserve，它也保留了所有的JSX，但是输出文件的扩展名是.js。我们这里因为不会用babel再转，所以用react就行。

// include：需要编译的目录。